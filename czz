#!/usr/bin/env php
<?php
/**
 * @author czz
 */
require './config.php';
require './dbconfig.php';

// 生成控制器和模型
function controllerAndModel($config)
{
    $table_name = $config['table_name'];
    $dir_name = $config['dir_name'];
    $TableName = convertUnderline($table_name);

    // 生成model文件
    $tpl_model = file_get_contents('./tpl/tpl_model.php');
    $tpl_model = str_replace('DATE_TIME', date("Y-m-d H:i"), $tpl_model);
    $tpl_model = str_replace('MODEL_NAME', $TableName, $tpl_model);
    $tpl_model = str_replace('TABLE_NAME', $table_name, $tpl_model);

    // 生成controller文件
    $tpl_controller = file_get_contents('./tpl/tpl_controller.php');
    $tpl_controller = str_replace(
        'DATE_TIME', date("Y-m-d H:i"), $tpl_controller
    );
    $tpl_controller = str_replace('CONTROLLER_NAME', $TableName, $tpl_controller);
    $tpl_controller = str_replace('TABLE_NAME', $table_name, $tpl_controller);
    $tpl_controller = str_replace('DIR_NAME', $dir_name, $tpl_controller);
    $tpl_controller = str_replace('MODEL_NAME', $TableName, $tpl_controller);

    if (!is_dir('curd')) {
        if (!mkdir('./curd', 0777, 1)) {
            echo "创建目录失败"; exit;
        }
    }

    if (!is_dir('curd/'.$table_name)) {
        if (!mkdir('./curd/'.$table_name, 0777, 1)) {
            echo "创建目录失败"; exit;
        }
    }

    file_put_contents('./curd/'.$table_name . "/" .$TableName . '_model.php', $tpl_model);
    echo "生成model文件-------" . $table_name . "/" .$TableName . '_model.php';
    echo PHP_EOL;

    file_put_contents('./curd/'.$table_name . "/" .$TableName . '.php', $tpl_controller);
    echo "生成controller文件-------" . $table_name . "/" .$TableName . '.php';
    echo PHP_EOL;
    echo PHP_EOL;
}

// 生成文档
function doc($config, $dbconfig)
{
    $table_name = $config['table_name'];
    $dir_name = $config['dir_name'];
    $TableName = convertUnderline($table_name);
    $DATABASE_FILED1 = printMd($table_name,1, $dbconfig);
    $DATABASE_FILED2 = printMd($table_name,2, $dbconfig);

    // 生成查询接口文档
    $list_md = file_get_contents('./tpl/list.md');
    $list_md = str_replace('CONTROLLER_NAME', $TableName, $list_md);
    $list_md = str_replace('DIR_NAME', $dir_name, $list_md);
    $list_md = str_replace('DATABASE_FILED1', $DATABASE_FILED1, $list_md);
    $list_md = str_replace('DATABASE_FILED2', $DATABASE_FILED2, $list_md);

    // 生成编辑操作接口文档
    $edit_md = file_get_contents('./tpl/edit.md');
    $edit_md = str_replace('CONTROLLER_NAME', $TableName, $edit_md);
    $edit_md = str_replace('DIR_NAME', $dir_name, $edit_md);
    $edit_md = str_replace('DATABASE_FILED1', $DATABASE_FILED1, $edit_md);

    // 生成新增操作接口文档
    $add_md = file_get_contents('./tpl/add.md');
    $add_md = str_replace('CONTROLLER_NAME', $TableName, $add_md);
    $add_md = str_replace('DIR_NAME', $dir_name, $add_md);
    $add_md = str_replace('DATABASE_FILED1', $DATABASE_FILED1, $add_md);

    // 生成新增操作接口文档
    $del_md = file_get_contents('./tpl/del.md');
    $del_md = str_replace('CONTROLLER_NAME', $TableName, $del_md);
    $del_md = str_replace('DIR_NAME', $dir_name, $del_md);

    if (!is_dir('doc')) {
        if (!mkdir('./doc', 0777, 1)) {
            echo "创建目录失败"; exit;
        }
    }

    if (!is_dir('doc/'.$table_name)) {
        if (!mkdir('./doc/'.$table_name, 0777, 1)) {
            echo "创建目录失败"; exit;
        }
    }

    file_put_contents("./doc/{$table_name}/".$table_name. '_list.md', $list_md);
    echo "生成查询列表接口文档文件-------" . $table_name . '_list.md';
    echo PHP_EOL;

    file_put_contents("./doc/{$table_name}/".$table_name. '_edit.md', $edit_md);
    echo "生成编辑操作接口文档文件-------" . $table_name . '_edit.md';
    echo PHP_EOL;

    file_put_contents("./doc/{$table_name}/".$table_name. '_add.md', $add_md);
    echo "生成添加操作接口文档文件-------" . $table_name . '_add.md';
    echo PHP_EOL;

    file_put_contents("./doc/{$table_name}/".$table_name. '_del.md', $del_md);
    echo "生成删除操作接口文档文件-------" . $table_name . '_del.md';
    echo PHP_EOL;
    echo PHP_EOL;
}

// 生成建表语句
function sql($config)
{
    $table_name = $config['table_name'];
    $TABLE_DESC = $config['table_desc'];

    // 生成model文件
    $tpl_sql = file_get_contents('./tpl/tpl_sql.sql');
    $tpl_sql = str_replace('DATE_TIME', date("Y-m-d"), $tpl_sql);
    $tpl_sql = str_replace('TABLE_DESC', $TABLE_DESC, $tpl_sql);
    $tpl_sql = str_replace('TABLE_NAME', $table_name, $tpl_sql);

    if (!is_dir('sql')) {
        if (!mkdir('./sql', 0777, 1)) {
            echo "创建目录失败"; exit;
        }
    }

    file_put_contents('./sql/' .$table_name. '.sql', $tpl_sql);
    echo "生成sql文件-------" .$table_name. '.sql';
    echo PHP_EOL;
    echo PHP_EOL;
}

// 执行sql
function excute_sql($sql, $dbconfig)
{
    $conn_string = "host={$dbconfig['host']} port={$dbconfig['port']} dbname={$dbconfig['dbname']} user={$dbconfig['user']} password={$dbconfig['password']}";
    $conn = pg_connect($conn_string) or die("Could not connect");

    $result = pg_query($conn, $sql);
    $rs = pg_fetch_all($result);

    pg_close($conn);

    return $rs;
}

// 表结构和字段注释
function tableDesc($table = '', $dbconfig) {

    $sql = "SELECT A .attnum,
	        (
      		  SELECT description FROM pg_catalog.pg_description
		      WHERE objoid = A .attrelid AND objsubid = A .attnum
        	) AS description, A .attname, pg_catalog.format_type (A .atttypid, A .atttypmod) AS data_type
            FROM pg_catalog.pg_attribute A
            WHERE 1 = 1 AND A .attrelid = (SELECT oid FROM pg_class	WHERE relname = '{$table}')
            AND A .attnum > 0 AND NOT A .attisdropped
            ORDER BY A .attnum;";

    return excute_sql($sql, $dbconfig);
}

/**
 * @param     $table 表名
 * @param int $type  1打印出是否必选 2不打印出是否必选
 *
 * @return string
 */
function printMd($table, $type = 1, $dbconfig) {
    if (empty($table)) {return '';}

    $fileds = tableDesc($table, $dbconfig);

    if ($type == 1) {
        $html = "|参数名|必选|类型|说明|";
        $html .= PHP_EOL;
        $html .= "|:----|:---|:----- |-----|";

        foreach ($fileds as $v) {
            $html .= PHP_EOL;
            $html .= "| ".$v['attname']." | 否 | ".$v['data_type']." | {$v['description']} |";
        }
    }

    if ($type == 2) {
        $html = "|字段名|类型|说明|";
        $html .= PHP_EOL;
        $html .= "|:----|:----- |-----|";

        foreach ($fileds as $v) {
            $html .= PHP_EOL;
            $html .= "| ".$v['attname']." | ".$v['data_type']." | {$v['description']} |";
        }
    }

    return $html;
}

function convertUnderline($str, $search = 'nice')
{
    $str = preg_replace_callback(
        '/([-_]+([a-z]{1}))/i', function($matches) {
        return strtoupper($matches[2]);
    }, $str
    );

    return str_replace($search, '', $str);
}

controllerAndModel($config);
doc($config, $dbconfig);
sql($config);

